#!/usr/bin/env python3
"""
Core Memory System - –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å MemGPT
–î–≤–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–∞ –ø–∞–º—è—Ç–∏: Human –∏ Persona
"""

import json
import os
from datetime import datetime
from typing import Dict, Optional, List
from dataclasses import dataclass


@dataclass
class CoreMemoryBlock:
    """–ë–ª–æ–∫ Core Memory"""
    name: str
    content: str
    last_updated: str
    max_length: int = 2000
    
    def update_content(self, new_content: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–ª–æ–∫–∞"""
        if len(new_content) <= self.max_length:
            self.content = new_content
            self.last_updated = datetime.now().isoformat()
            return True
        return False
    
    def append_content(self, additional_content: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É"""
        new_content = f"{self.content}\n{additional_content}".strip()
        return self.update_content(new_content)
    
    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "name": self.name,
            "content": self.content,
            "last_updated": self.last_updated,
            "max_length": self.max_length
        }


class CoreMemory:
    """
    –°–∏—Å—Ç–µ–º–∞ Core Memory —Å –¥–≤—É–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏:
    - human: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    - persona: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç-–±–æ—Ç–µ
    """
    
    def __init__(self, storage_file: str = "core_memory.json"):
        self.storage_file = storage_file
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤
        self.human = CoreMemoryBlock(
            name="human",
            content="",
            last_updated=datetime.now().isoformat(),
            max_length=2000
        )
        
        self.persona = CoreMemoryBlock(
            name="persona", 
            content="–Ø —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–∞–º—è—Ç—å—é. –Ø –ø–æ–º–æ–≥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞–ø–æ–º–∏–Ω–∞—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–µ–¥—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏.",
            last_updated=datetime.now().isoformat(),
            max_length=1500
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        #self.load_from_file()
    
    def add_to_human(self, information: str) -> str:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–ª–æ–∫ human
        
        Args:
            information: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if self.human.append_content(information):
                #self.save_to_file()
                return f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ human –±–ª–æ–∫: {information[:50]}..."
            else:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {self.human.max_length} —Å–∏–º–≤–æ–ª–æ–≤"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ human –±–ª–æ–∫: {e}"
    
    def add_to_persona(self, information: str) -> str:
        """
        –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –±–ª–æ–∫ persona
        
        Args:
            information: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if self.persona.append_content(information):
                #self.save_to_file()
                return f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ persona –±–ª–æ–∫: {information[:50]}..."
            else:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {self.persona.max_length} —Å–∏–º–≤–æ–ª–æ–≤"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ persona –±–ª–æ–∫: {e}"
    
    def edit_human(self, new_content: str) -> str:
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –±–ª–æ–∫ human
        
        Args:
            new_content: –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
            
        Returns:
            –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if self.human.update_content(new_content):
                #self.save_to_file()
                return f"‚úÖ Human –±–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω ({len(new_content)} —Å–∏–º–≤–æ–ª–æ–≤)"
            else:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {self.human.max_length} —Å–∏–º–≤–æ–ª–æ–≤"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è human –±–ª–æ–∫–∞: {e}"
    
    def edit_persona(self, new_content: str) -> str:
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –±–ª–æ–∫ persona
        
        Args:
            new_content: –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
            
        Returns:
            –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if self.persona.update_content(new_content):
                #self.save_to_file()
                return f"‚úÖ Persona –±–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω ({len(new_content)} —Å–∏–º–≤–æ–ª–æ–≤)"
            else:
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {self.persona.max_length} —Å–∏–º–≤–æ–ª–æ–≤"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è persona –±–ª–æ–∫–∞: {e}"
    
    def get_human_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ human –±–ª–æ–∫–∞"""
        return self.human.content if self.human.content else "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
    
    def get_persona_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ persona –±–ª–æ–∫–∞"""
        return self.persona.content
    
    def get_core_memory_context(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç Core Memory –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç
        
        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        """
        context_parts = ["=== CORE MEMORY ==="]
        
        # Human –±–ª–æ–∫
        if self.human.content.strip():
            context_parts.append(f"Human: {self.human.content}")
        else:
            context_parts.append("Human: <–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ>")
        
        # Persona –±–ª–æ–∫  
        context_parts.append(f"Persona: {self.persona.content}")
        
        context_parts.append("=== END CORE MEMORY ===")
        
        return "\n".join(context_parts)
    
    def get_stats(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Core Memory"""
        human_len = len(self.human.content)
        persona_len = len(self.persona.content)
        
        stats = [
            "üìä Core Memory —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
            f"  üë§ Human: {human_len}/{self.human.max_length} —Å–∏–º–≤–æ–ª–æ–≤",
            f"  ü§ñ Persona: {persona_len}/{self.persona.max_length} —Å–∏–º–≤–æ–ª–æ–≤",
            f"  üìÖ Human –æ–±–Ω–æ–≤–ª–µ–Ω: {self.human.last_updated[:19]}",
            f"  üìÖ Persona –æ–±–Ω–æ–≤–ª–µ–Ω: {self.persona.last_updated[:19]}"
        ]
        
        return "\n".join(stats)
    
    def clear_human(self) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å human –±–ª–æ–∫"""
        try:
            self.human.update_content("")
            #self.save_to_file()
            return "‚úÖ Human –±–ª–æ–∫ –æ—á–∏—â–µ–Ω"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ human –±–ª–æ–∫–∞: {e}"
    
    def clear_persona(self) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å persona –±–ª–æ–∫"""
        try:
            self.persona.update_content("")
            #self.save_to_file()
            return "‚úÖ Persona –±–ª–æ–∫ –æ—á–∏—â–µ–Ω"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ persona –±–ª–æ–∫–∞: {e}"
    
    def save_to_file(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å Core Memory –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                "human": self.human.to_dict(),
                "persona": self.persona.to_dict(),
                "saved_at": datetime.now().isoformat()
            }
            
            with open(self.storage_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Core Memory: {e}")
            return False
    
    def load_from_file(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å Core Memory –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.storage_file):
                return False
            
            with open(self.storage_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º human –±–ª–æ–∫
            if "human" in data:
                human_data = data["human"]
                self.human = CoreMemoryBlock(
                    name=human_data.get("name", "human"),
                    content=human_data.get("content", ""),
                    last_updated=human_data.get("last_updated", datetime.now().isoformat()),
                    max_length=human_data.get("max_length", 2000)
                )
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º persona –±–ª–æ–∫
            if "persona" in data:
                persona_data = data["persona"]
                self.persona = CoreMemoryBlock(
                    name=persona_data.get("name", "persona"),
                    content=persona_data.get("content", ""),
                    last_updated=persona_data.get("last_updated", datetime.now().isoformat()),
                    max_length=persona_data.get("max_length", 1500)
                )
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Core Memory: {e}")
            return False
    
    def export_memory(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π Core Memory –≤ JSON"""
        data = {
            "export_timestamp": datetime.now().isoformat(),
            "human": self.human.to_dict(),
            "persona": self.persona.to_dict()
        }
        return json.dumps(data, ensure_ascii=False, indent=2)
    
    def import_memory(self, json_data: str) -> str:
        """–ò–º–ø–æ—Ä—Ç Core Memory –∏–∑ JSON"""
        try:
            data = json.loads(json_data)
            
            if "human" in data:
                human_data = data["human"]
                if self.human.update_content(human_data.get("content", "")):
                    pass
                else:
                    return "‚ùå Human –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"
            
            if "persona" in data:
                persona_data = data["persona"]
                if self.persona.update_content(persona_data.get("content", "")):
                    pass
                else:
                    return "‚ùå Persona –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"
            
            #self.save_to_file()
            return "‚úÖ Core Memory –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Core Memory: {e}"


def create_core_memory_tools(core_memory: CoreMemory) -> Dict[str, Dict]:
    """
    –°–æ–∑–¥–∞–µ—Ç tool-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Core Memory
    
    Args:
        core_memory: –≠–∫–∑–µ–º–ø–ª—è—Ä CoreMemory
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    """
    
    tools = {}
    
    # Human –±–ª–æ–∫ tools
    tools["core_memory_add_human"] = {
        "name": "core_memory_add_human",
        "description": "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Core Memory (human –±–ª–æ–∫)",
        "parameters": {
            "type": "object",
            "properties": {
                "information": {
                    "type": "string",
                    "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
                }
            },
            "required": ["information"]
        },
        "function": core_memory.add_to_human
    }
    
    tools["core_memory_edit_human"] = {
        "name": "core_memory_edit_human", 
        "description": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Core Memory (human –±–ª–æ–∫)",
        "parameters": {
            "type": "object",
            "properties": {
                "new_content": {
                    "type": "string",
                    "description": "–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ human –±–ª–æ–∫–∞"
                }
            },
            "required": ["new_content"]
        },
        "function": core_memory.edit_human
    }
    
    # Persona –±–ª–æ–∫ tools
    tools["core_memory_add_persona"] = {
        "name": "core_memory_add_persona",
        "description": "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç –±–æ—Ç–µ –≤ Core Memory (persona –±–ª–æ–∫)",
        "parameters": {
            "type": "object",
            "properties": {
                "information": {
                    "type": "string",
                    "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
                }
            },
            "required": ["information"]
        },
        "function": core_memory.add_to_persona
    }
    
    tools["core_memory_edit_persona"] = {
        "name": "core_memory_edit_persona",
        "description": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç –±–æ—Ç–µ –≤ Core Memory (persona –±–ª–æ–∫)",
        "parameters": {
            "type": "object",
            "properties": {
                "new_content": {
                    "type": "string", 
                    "description": "–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ persona –±–ª–æ–∫–∞"
                }
            },
            "required": ["new_content"]
        },
        "function": core_memory.edit_persona
    }
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ tools
    tools["core_memory_get_human"] = {
        "name": "core_memory_get_human",
        "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Core Memory",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        },
        "function": lambda: core_memory.get_human_info()
    }
    
    tools["core_memory_get_persona"] = {
        "name": "core_memory_get_persona",
        "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç –±–æ—Ç–µ –∏–∑ Core Memory",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        },
        "function": lambda: core_memory.get_persona_info()
    }
    
    tools["core_memory_stats"] = {
        "name": "core_memory_stats",
        "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Core Memory",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        },
        "function": lambda: core_memory.get_stats()
    }
    
    return tools